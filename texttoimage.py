# -*- coding: utf-8 -*-
"""TextToImage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1iigX53rnm1V6b4zLIaGV5tFzQwx4N8of
"""

!pip install diffusers==0.31.0 transformers accelerate safetensors
!pip install torch torchvision matplotlib --index-url https://download.pytorch.org/whl/cu121

import torch
from diffusers import StableDiffusionPipeline
import matplotlib.pyplot as plt
import random
import os

model_id = "runwayml/stable-diffusion-v1-5"
device = "cuda" if torch.cuda.is_available() else "cpu"

pipe = StableDiffusionPipeline.from_pretrained(model_id, torch_dtype=torch.float16)
pipe = pipe.to(device)
pipe.enable_attention_slicing()

def generate_and_show(prompts, guidance_scale=7.5, steps=30, num_images=1, seed=None):
    if seed is None:
        seed = random.randint(0, 999999)
    generator = torch.manual_seed(seed)

    images = []
    for prompt in prompts:
        with torch.autocast(device):
            out = pipe(prompt, guidance_scale=guidance_scale,
                       num_inference_steps=steps,
                       generator=generator,
                       num_images_per_prompt=num_images)
            images.extend(out.images)

    cols = num_images if len(prompts) == 1 else len(prompts)
    rows = len(prompts) if num_images == 1 else 1
    fig, axes = plt.subplots(rows, cols, figsize=(4*cols, 4*rows))

    if rows == 1 and cols == 1:
        axes.imshow(images[0])
        axes.axis("off")
    elif rows == 1:
        for i, ax in enumerate(axes):
            ax.imshow(images[i])
            ax.axis("off")
    elif cols == 1:
        for i, ax in enumerate(axes):
            ax.imshow(images[i])
            ax.axis("off")
    else:
        k = 0
        for i in range(rows):
            for j in range(cols):
                axes[i, j].imshow(images[k])
                axes[i, j].axis("off")
                k += 1

    plt.show()

    os.makedirs("outputs", exist_ok=True)
    for idx, img in enumerate(images):
        filename = f"outputs/gen_{seed}_{idx}.png"
        img.save(filename)
        print(f"âœ… Saved {filename}")

generate_and_show(
    prompts=["A futuristic city at sunset, ultra detailed, cinematic, 8k"],
    guidance_scale=7.5,
    steps=30,
    num_images=1,
    seed=42
)

generate_and_show(
    prompts=["A cute baby dragon playing with butterflies, digital art"],
    guidance_scale=8.0,
    steps=40,
    num_images=3,
    seed=123
)

generate_and_show(
    prompts=["A cat wears a pink hat"],
    guidance_scale=7.5,
    steps=30,
    num_images=1,
    seed=42
)

